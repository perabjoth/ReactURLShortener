{"version":3,"sources":["api/shrtcode.js","components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","HTTP_URL_VALIDATOR_REGEX","Search","useState","link","setLink","short","setShort","isLoading","setIsLoading","error","setError","openToolTip","setOpenToolTip","onSubmit","e","preventDefault","match","getLink","a","localStorage","getItem","shrtcode","get","then","response","data","result","short_link","setItem","catch","console","message","TextField","disabled","className","label","variant","value","onChange","target","onKeyDown","key","LinearProgress","Button","color","onClick","ClickAwayListener","onClickAway","Tooltip","title","open","disableFocusListener","disableHoverListener","disableTouchListener","PopperProps","disablePortal","navigator","clipboard","writeText","window","setTimeout","InputProps","endAdornment","position","App","AppBar","Toolbar","Typography","Grid","container","direction","justify","alignItems","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4TAEeA,E,OAAAA,EAAMC,OAAO,CACzBC,QAAS,8B,QCENC,EAA2B,qGA4HlBC,EA1HA,WAAO,IAAD,EAEOC,mBAAS,IAFhB,mBAEVC,EAFU,KAEJC,EAFI,OAGSF,mBAAS,IAHlB,mBAGVG,EAHU,KAGHC,EAHG,OAIiBJ,oBAAS,GAJ1B,mBAIVK,EAJU,KAICC,EAJD,OAKSN,mBAAS,IALlB,mBAKVO,EALU,KAKHC,EALG,OAMqBR,oBAAS,GAN9B,mBAMVS,EANU,KAMGC,EANH,KAqBXC,EAAW,SAACC,GACdA,EAAEC,iBACFT,EAAS,IACTI,GAAS,GAEOP,EARFa,MAAMhB,GAShBiB,IAEAP,EAAS,gBAIXO,EAAO,uCAAG,sBAAAC,EAAA,yDACZV,GAAa,IACVW,aAAaC,QAAQjB,GAFZ,gBAGRG,EAASa,aAAaC,QAAQjB,IAC9BK,GAAa,GAJL,sCAMFa,EACDC,IADC,sBACkBnB,IACnBoB,MAAK,SAACC,GACHlB,EAASkB,EAASC,KAAKC,OAAOC,YAC9BnB,GAAa,GACbW,aAAaS,QAAQzB,EAAMqB,EAASC,KAAKC,OAAOC,eACjDE,OAAM,SAACf,GACNgB,QAAQrB,MAAMK,GACdN,GAAa,GACbE,EAASI,EAAEiB,YAfX,2CAAH,qDAoBb,OACI,qCACI,iCACI,cAACC,EAAA,EAAD,CACIC,SAAU1B,EACVE,MAAgB,IAATA,EACPI,SAAU,SAACC,GACPD,EAASC,IAEboB,UAAU,cACVC,MAAO1B,GAAgB,aACvB2B,QAAQ,WACRC,MAAOlC,EACPmC,SAAU,SAACxB,GACPV,EAAQU,EAAEyB,OAAOF,QAErBG,UAAW,SAAC1B,GACM,UAAVA,EAAE2B,MACF3B,EAAEC,iBACFF,EAASC,OAIpBP,EAAY,cAACmC,EAAA,EAAD,IACT,cAACC,EAAA,EAAD,CACIT,UAAU,eACVE,QAAQ,YACRQ,MAAM,UACNC,QAAS,SAAC/B,GACND,EAASC,IAEbmB,UAAW9B,EAPf,4BAaPE,GACA,cAACyC,EAAA,EAAD,CAAmBC,YA9ED,WACvBnC,GAAe,IA6EV,SACG,cAACoC,EAAA,EAAD,CACIC,MAAM,SACNC,KAAMvC,EACNwC,sBAAoB,EACpBC,sBAAoB,EACpBC,sBAAoB,EACpBC,YAAa,CACTC,eAAe,GAPvB,SAUI,cAACvB,EAAA,EAAD,CACIG,MAAM,aACNC,QAAQ,WACRH,UAAQ,EACRW,MAAM,YACNP,MAAOhC,EACPwC,QAAS,WACLW,UAAUC,UAAUC,UAAUrD,GApGlDO,GAAe,GACf+C,OAAOC,YAAW,WAAKhD,GAAe,KAAU,MAsGhCiD,WAAY,CACRC,aAAc,cAAC,IAAD,CAAsBC,SAAS,mBCnG1DC,MAhBf,WACE,OACI,qCACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAY/B,QAAQ,KAAKF,UAAU,WAAnC,iCAGR,cAACkC,EAAA,EAAD,CAAMlC,UAAU,MAAMmC,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,SAA/E,SACI,cAAC,EAAD,UCFCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpD,MAAK,YAAkD,IAA/CqD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.44588389.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n   baseURL: 'https://api.shrtco.de/v2/'\r\n});","import React, {useState} from 'react';\r\nimport {Button, ClickAwayListener,LinearProgress, Tooltip, TextField} from '@material-ui/core';\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\r\nimport shrtcode from \"../api/shrtcode\";\r\n\r\nconst HTTP_URL_VALIDATOR_REGEX = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g;\r\n\r\nconst Search = () => {\r\n\r\n    const [link, setLink] = useState(\"\");\r\n    const [short, setShort] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [openToolTip, setOpenToolTip] = useState(false);\r\n\r\n    const handleTooltipOpen = () =>{\r\n        setOpenToolTip(true);\r\n        window.setTimeout(()=>{setOpenToolTip(false);}, 500);\r\n    }\r\n\r\n    const handleTooltipClose = () =>{\r\n        setOpenToolTip(false);\r\n    }\r\n\r\n    const validateURL = (string) => {\r\n        return string.match(HTTP_URL_VALIDATOR_REGEX);\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        setShort('');\r\n        setError(false);\r\n\r\n        if (validateURL(link)) {\r\n            getLink();\r\n        } else {\r\n            setError('Invalid URL');\r\n        }\r\n    }\r\n\r\n    const getLink = async () => {\r\n        setIsLoading(true);\r\n        if(localStorage.getItem(link)){\r\n            setShort(localStorage.getItem(link));\r\n            setIsLoading(false);\r\n        }else {\r\n            await shrtcode\r\n                .get(`shorten?url=${link}`)\r\n                .then((response) => {\r\n                    setShort(response.data.result.short_link);\r\n                    setIsLoading(false);\r\n                    localStorage.setItem(link, response.data.result.short_link);\r\n                }).catch((e) => {\r\n                    console.error(e);\r\n                    setIsLoading(false);\r\n                    setError(e.message);\r\n                });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form>\r\n                <TextField\r\n                    disabled={isLoading}\r\n                    error={error != ''}\r\n                    onSubmit={(e) => {\r\n                        onSubmit(e);\r\n                    }}\r\n                    className=\"SearchField\"\r\n                    label={error ? error : \"enter link\"}\r\n                    variant=\"outlined\"\r\n                    value={link}\r\n                    onChange={(e) => {\r\n                        setLink(e.target.value);\r\n                    }}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === 'Enter') {\r\n                            e.preventDefault();\r\n                            onSubmit(e);\r\n                        }\r\n                    }}\r\n                />\r\n                {isLoading ? <LinearProgress/> :\r\n                    <Button\r\n                        className='SearchButton'\r\n                        variant='contained'\r\n                        color=\"primary\"\r\n                        onClick={(e) => {\r\n                            onSubmit(e);\r\n                        }}\r\n                        disabled={!link}\r\n                    >\r\n                        Shorten URL\r\n                    </Button>\r\n                }\r\n            </form>\r\n            {short &&\r\n            (<ClickAwayListener onClickAway={handleTooltipClose}>\r\n                <Tooltip\r\n                    title=\"Copied\"\r\n                    open={openToolTip}\r\n                    disableFocusListener\r\n                    disableHoverListener\r\n                    disableTouchListener\r\n                    PopperProps={{\r\n                        disablePortal: true,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        label=\"Short Link\"\r\n                        variant=\"outlined\"\r\n                        disabled\r\n                        color=\"secondary\"\r\n                        value={short}\r\n                        onClick={() => {\r\n                            navigator.clipboard.writeText(short);\r\n                            handleTooltipOpen();\r\n                        }}\r\n                        InputProps={{\r\n                            endAdornment: <FileCopyOutlinedIcon position=\"end\"/>,\r\n                        }}\r\n                    />\r\n                </Tooltip>\r\n            </ClickAwayListener>)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Search;","import {AppBar, Grid, Toolbar, Typography} from '@material-ui/core';\n\nimport './App.css';\nimport Search from './components/Search';\n\nfunction App() {\n  return (\n      <>\n          <AppBar>\n              <Toolbar>\n                  <Typography variant=\"h6\" className=\"TitleBar\" >Shorten Any URL</Typography>\n              </Toolbar>\n          </AppBar>\n          <Grid className=\"App\" container direction='column' justify='center' alignItems='center'>\n              <Search/>\n          </Grid>\n      </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}